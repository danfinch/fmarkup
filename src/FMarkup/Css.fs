
namespace FMarkup

open System
open System.IO
open System.Reflection
open Microsoft.FSharp.Reflection
open Futility

module Css =
  let private s = Prim.style
  // CSS 2
  let azimuth v = s "azimuth" v
  module background =
    let value v = s "background" v
    module attachment =
      let scroll = s "background-attachment" "scroll"
      let fixed' = s "background-attachment" "fixed"
      let inherit' = s "background-attachment" "inherit"
    let color v = s "background-color" v
    let image v = s "background-image" v
    let position v = s "background-position" v
    module repeat =
      let repeat = s "background-repeat" "repeat"
      let repeatX = s "background-repeat" "repeat-x"
      let repeatY = s "background-repeat" "repeat-y"
      let noRepeat = s "background-repeat" "no-repeat"
      let inherit' = s "background-repeat" "inherit"
  module border =
    let value v = s "border" v
    module collapse =
      let collapse = s "border-collapse" "collapse"
      let separate = s "border-collapse" "separate"
      let inherit' = s "border-collapse" "inherit"
    let color v = s "border-color" v
    let spacing v = s "border-spacing" v
    let width v = s "border-width" v
    module left =
      let value v = s "border-left" v
      let color v = s "border-left-color" v
      let style v = s "border-left-style" v
      let width v = s "border-left-width" v
    module right =
      let value v = s "border-right" v
      let color v = s "border-right-color" v
      let style v = s "border-right-style" v
      let width v = s "border-right-width" v
    module top =
      let value v = s "border-top" v
      let color v = s "border-top-color" v
      let style v = s "border-top-style" v
      let width v = s "border-top-width" v
    module bottom =
      let value v = s "border-bottom" v
      let color v = s "border-bottom-color" v
      let style v = s "border-bottom-style" v
      let width v = s "border-bottom-width" v
  let bottom v = s "bottom" v
  module captionSide =
    let top = s "caption-side" "top"
    let bottom = s "caption-side" "bottom"
    let inherit' = s "caption-side" "inherit"
  module clear =
    let none = s "clear" "none"
    let left = s "clear" "left"
    let right = s "clear" "right"
    let both = s "clear" "both"
    let inherit' = s "clear" "inherit"
  let clip v = s "clip" v
  let color v = s "color" v
  let content v = s "content" v
  let counterIncrement v = s "counter-increment" v
  let counterReset v = s "counter-reset" v
  let cueAfter v = s "cue-after" v
  let cueBefore v = s "cue-before" v
  let cue v = s "cue" v
  module cursor =
    let auto = s "cursor" "auto"
    let crosshair = s "cursor" "crosshair"
    let default' = s "cursor" "default"
    let pointer = s "cursor" "pointer"
    let move = s "cursor" "move"
    let eResize = s "cursor" "e-resize"
    let neResize = s "cursor" "ne-resize"
    let nwResize = s "cursor" "nw-resize"
    let nResize = s "cursor" "n-resize"
    let seResize = s "cursor" "se-resize"
    let swResize = s "cursor" "sw-resize"
    let sResize = s "cursor" "s-resize"
    let wResize = s "cursor" "w-resize"
    let text = s "cursor" "text"
    let wait = s "cursor" "wait"
    let help = s "cursor" "help"
    let progress = s "cursor" "progress"
    let inherit' = s "cursor" "inherit"
    let uri v = s "cursor" ("url(" + v + ")")
  module direction =
    let ltr = s "direction" "ltr"
    let rtl = s "direction" "rtl"
    let inherit' = s "direction" "inherit"
  module display =
    let inline' = s "display" "inline"
    let block = s "display" "block"
    let listItem = s "display" "list-item"
    let runIn = s "display" "run-in"
    let inlineBlock = s "display" "inline-block"
    let table = s "display" "table"
    let inlineTable = s "display" "inline-table"
    let tableRowGroup = s "display" "table-row-group"
    let tableHeaderGroup = s "display" "table-header-group"
    let tableFooterGroup = s "display" "table-footer-group"
    let tableRow = s "display" "table-row"
    let tableColumnGroup = s "display" "table-column-group"
    let tableColumn = s "display" "table-column"
    let tableCell = s "display" "table-cell"
    let tableCaption = s "display" "table-caption"
    let none = s "display" "none"
    let inherit' = s "display" "inherit"
  module elevation =
    let angle v = s "elevation" v
    let below = s "elevation" "below"
    let level = s "elevation" "level"
    let above = s "elevation" "above"
    let higher = s "elevation" "higher"
    let lower = s "elevation" "lower"
    let inherit' = s "elevation" "inherit"
  module emptyCells =
    let show = s "empty-cells" "show"
    let hide = s "empty-cells" "hide"
    let inherit' = s "empty-cells" "inherit"
  module float =
    let left = s "float" "left"
    let right = s "float" "right"
    let none = s "float" "none"
    let inherit' = s "float" "inherit"
  module font =
    let value v = s "font" v
    let family v = s "font-family" v
    let size v = s "font-size" v
    module style =
      let normal = s "font-style" "normal"
      let italic = s "font-style" "italic"
      let oblique = s "font-style" "oblique"
      let inherit' = s "font-style" "inherit"
    module variant =
      let normal = s "font-variant" "normal"
      let smallCaps = s "font-variant" "small-caps"
      let inherit' = s "font-variant" "inherit"
    module weight =
      let value v = s "font-weight" v
      let normal = s "font-weight" "normal"
      let bold = s "font-weight" "bold"
      let bolder = s "font-weight" "bolder"
      let lighter = s "font-weight" "lighter"
      let inherit' = s "font-weight" "inherit"
  let height v = s "height" v
  let left v = s "left" v
  let letterSpacing v = s "letter-spacing" v
  let lineHeight v = s "line-height" v
  module listStyle =
    let value v = s "list-style" v
    let image v = s "list-style-image" v
    module position =
      let inside = s "list-style-position" "inside"
      let outside = s "list-style-position" "outside"
      let inherit' = s "list-style-position" "inherit"
    module type' =
      let disc = s "list-style-type" "disc"
      let circle = s "list-style-type" "circle"
      let square = s "list-style-type" "square"
      let decimal = s "list-style-type" "decimal"
      let decimalLeadingZero = s "list-style-type" "decimal-leading-zero"
      let lowerRoman = s "list-style-type" "lower-roman"
      let upperRoman = s "list-style-type" "upper-roman"
      let lowerGreek = s "list-style-type" "lower-greek"
      let lowerLatin = s "list-style-type" "lower-latin"
      let upperLatin = s "list-style-type" "upper-latin"
      let armenian = s "list-style-type" "armenian"
      let georgian = s "list-style-type" "georgian"
      let lowerAlpha = s "list-style-type" "lower-alpha"
      let upperAlpha = s "list-style-type" "upper-alpha"
      let none = s "list-style-type" "none"
      let inherit' = s "list-style-type" "inherit"
  module margin =
    let value v = s "margin" v
    let left v = s "margin-left" v
    let right v = s "margin-right" v
    let top v = s "margin-top" v
    let bottom v = s "margin-bottom" v
  let maxHeight v = s "max-height" v
  let maxWidth v = s "max-width" v
  let minHeight v = s "min-height" v
  let minWidth v = s "min-width" v
  let orphans v = s "orphans" v
  module outline =
    let value v = s "outline" v
    let color v = s "outline-color" v
    let style v = s "outline-style" v
    let width v = s "outline-width" v
  module overflow =
    let visible = s "overflow" "visible"
    let hidden = s "overflow" "hidden"
    let scroll = s "overflow" "scroll"
    let auto = s "overflow" "auto"
    let inherit' = s "overflow" "inherit"
    module x =
      let visible = s "overflow-x" "visible"
      let hidden = s "overflow-x" "hidden"
      let scroll = s "overflow-x" "scroll"
      let auto = s "overflow-x" "auto"
      let inherit' = s "overflow-x" "inherit"
    module y =
      let visible = s "overflow-y" "visible"
      let hidden = s "overflow-y" "hidden"
      let scroll = s "overflow-y" "scroll"
      let auto = s "overflow-y" "auto"
      let inherit' = s "overflow-y" "inherit"
  module padding =
    let value v = s "padding" v
    let left v = s "padding-left" v
    let right v = s "padding-right" v
    let top v = s "padding-top" v
    let bottom v = s "padding-bottom" v
  module pageBreak =
    module after =
      let auto = s "page-break-after" "auto"
      let always = s "page-break-after" "always"
      let avoid = s "page-break-after" "avoid"
      let left = s "page-break-after" "left"
      let right = s "page-break-after" "right"
      let inherit' = s "page-break-after" "inherit"
    module before =
      let auto = s "page-break-before" "auto"
      let always = s "page-break-before" "always"
      let avoid = s "page-break-before" "avoid"
      let left = s "page-break-before" "left"
      let right = s "page-break-before" "right"
      let inherit' = s "page-break-before" "inherit"
    module inside =
      let auto = s "page-break-inside" "auto"
      let always = s "page-break-inside" "always"
      let avoid = s "page-break-inside" "avoid"
      let left = s "page-break-inside" "left"
      let right = s "page-break-inside" "right"
      let inherit' = s "page-break-inside" "inherit"
  module pause =
    let value v = s "pause" v
    let after v = s "pause-after" v
    let before v = s "pause-before" v
  let pitch v = s "pitch" v
  let pitchRange v = s "pitch-range" v
  let playDuring v = s "play-during" v
  module position =
    let static' = s "position" "static"
    let relative = s "position" "relative"
    let absolute = s "position" "absolute"
    let fixed' = s "position" "fixed"
    let inherit' = s "position" "inherit"
  let quotes v = s "quotes" v
  let richness v = s "richness" v
  let right v = s "right" v
  module speak =
    let normal = s "speak" "normal"
    let none = s "speak" "none"
    let spellOut = s "speak" "spell-out"
    let inherit' = s "speak" "inherit"
    module header =
      let once = s "speak-header" "once"
      let always = s "speak-header" "always"
      let inherit' = s "speak-header" "inherit"
    module numeral =
      let digits = s "speak-numeral" "digits"
      let continuous = s "speak-header" "continuous"
      let inherit' = s "speak-header" "inherit"
    module punctuation =
      let code = s "speak-punctuation" "code"
      let none = s "speak-punctuation" "none"
      let inherit' = s "speak-punctuation" "inherit"
  module speechRate =
    let number v = s "speech-rate" v
    let xSlow = s "speech-rate" "x-slow"
    let slow = s "speech-rate" "slow"
    let medium = s "speech-rate" "medium"
    let fast = s "speech-rate" "fast"
    let xFast = s "speech-rate" "x-fast"
    let faster = s "speech-rate" "faster"
    let slower = s "speech-rate" "slower"
    let inherit' = s "speech-rate" "inherit"
  let stress v = s "stress" v
  module tableLayout =
    let auto = s "table-layout" "auto"
    let fixed' = s "table-layout" "fixed"
    let inherit' = s "table-layout" "inherit"
  module text =
    module align =
      let left = s "text-align" "left"
      let right = s "text-align" "right"
      let center = s "text-align" "center"
      let justify = s "text-align" "justify"
      let inherit' = s "text-align" "inherit"
    module decoration =
      let none = s "text-decoration" "none"
      let underline = s "text-decoration" "underline"
      let overline = s "text-decoration" "overline"
      let lineThrough = s "text-decoration" "line-through"
      let blink = s "text-decoration" "blink"
      let inherit' = s "text-decoration" "inherit"
    let indent v = s "text-indent" v
    module transform =
      let capitalize = s "text-transform" "capitalize"
      let uppercase = s "text-transform" "uppercase"
      let lowercase = s "text-transform" "lowercase"
      let none = s "text-transform" "none"
      let inherit' = s "text-transform" "inherit"
  let top v = s "top" v
  module unicodeBidi =
    let normal = s "unicode-bidi" "normal"
    let embed = s "unicode-bidi" "embed"
    let bidiOverride = s "unicode-bidi" "bidi-override"
    let inherit' = s "unicode-bidi" "inherit"
  module verticalAlign =
    let value v = s "vertical-align" v
    let baseline = s "vertical-align" "baseline"
    let sub = s "vertical-align" "sub"
    let super = s "vertical-align" "super"
    let top = s "vertical-align" "top"
    let textTop = s "vertical-align" "text-top"
    let middle = s "vertical-align" "middle"
    let bottom = s "vertical-align" "bottom"
    let textBottom = s "vertical-align" "text-bottom"
    let inherit' = s "vertical-align" "inherit"
  module visibility =
    let visible = s "visibility" "visible"
    let hidden = s "visibility" "hidden"
    let collapse = s "visibility" "collapse"
    let inherit' = s "visibility" "inherit"
  let voiceFamily v = s "voice-family" v
  module volume =
    let value v = s "volume" v
    let silent = s "volume" "silent"
    let xSoft = s "volume" "x-soft"
    let soft = s "volume" "soft"
    let medium = s "volume" "medium"
    let loud = s "volume" "loud"
    let xLoud = s "volume" "x-loud"
    let inherit' = s "volume" "inherit"
  module whiteSpace =
    let normal = s "white-space" "normal"
    let pre = s "white-space" "pre"
    let nowrap = s "white-space" "nowrap"
    let preWrap = s "white-space" "pre-wrap"
    let preLine = s "white-space" "pre-line"
    let inherit' = s "white-space" "inherit"
  let widows v = s "widows" v
  let width v = s "width" v
  let wordSpacing v = s "word-spacing" v
  let zIndex v = s "z-index" v
  // CSS 3
  module alignment =
    module adjust =
      let value v = s "alignment-adjust" v
      let auto = s "alignment-adjust" "auto"
      let baseline = s "alignment-adjust" "baseline"
      let beforeEdge = s "alignment-adjust" "before-edge"
      let textBeforeEdge = s "alignment-adjust" "text-before-edge"
      let central = s "alignment-adjust" "central"
      let middle = s "alignment-adjust" "middle"
      let afterEdge = s "alignment-adjust" "after-edge"
      let textAfterEdge = s "alignment-adjust" "text-after-edge"
      let ideographic = s "alignment-adjust" "ideographic"
      let alphabetic = s "alignment-adjust" "alphabetic"
      let hanging = s "alignment-adjust" "hanging"
      let mathematical = s "alignment-adjust" "mathematical"
      let inherit' = s "alignment-adjust" "inherit"
    module baseline =
      let baseline = s "alignment-baseline" "baseline"
      let useScript = s "alignment-baseline" "use-script"
      let beforeEdge = s "alignment-baseline" "before-edge"
      let textBeforeEdge = s "alignment-baseline" "text-before-edge"
      let central = s "alignment-baseline" "central"
      let middle = s "alignment-baseline" "middle"
      let afterEdge = s "alignment-baseline" "after-edge"
      let textAfterEdge = s "alignment-baseline" "text-after-edge"
      let ideographic = s "alignment-baseline" "ideographic"
      let alphabetic = s "alignment-baseline" "alphabetic"
      let hanging = s "alignment-baseline" "hanging"
      let mathematical = s "alignment-baseline" "mathematical"
      let inherit' = s "alignment-baseline" "inherit"
  module animation =
    let value v = s "animation" v
    let delay v = s "animation-delay" v
    module direction =
      let normal = s "animation-direction" "normal"
      let alternate = s "animation-direction" "alternate"
      let inherit' = s "animation-direction" "inherit"
    module playState =
      let running = s "animation-play-state" "running"
      let paused = s "animation-play-state" "paused"
      let inherit' = s "animation-play-state" "inherit"
    let duration v = s "animation-duration" v
    let iterationCount v = s "animation-iteration-count" v
    let name v = s "animation-name" v
    module timingFunction =
      let value v = s "animation-timing-function" v
      let ease = s "animation-timing-function" "ease"
      let linear = s "animation-timing-function" "linear"
      let easeIn = s "animation-timing-function" "ease-in"
      let easeOut = s "animation-timing-function" "ease-out"
      let easeInOut = s "animation-timing-function" "ease-in-out"
      let inherit' = s "animation-timing-function" "inherit"
  module appearance =
    let normal = s "appearance" "normal"
    let button = s "appearance" "button"
    let pushButton = s "appearance" "push-button"
    let hyperlink = s "appearance" "hyperlink"
    let radioButton = s "appearance" "radio-button"
    let checkbox = s "appearance" "checkbox"
    let popUpMenu = s "appearance" "pop-up-menu"
    let listMenu = s "appearance" "list-menu"
    let radioGroup = s "appearance" "radio-group"
    let checkboxGroup = s "appearance" "checkbox-group"
    let field = s "appearance" "field"
    let password = s "appearance" "password"
  // holy crap I gave up here, there are a lot of these
  module box =
    let shadow v = s "box-shadow" v
