
namespace FMarkup

open System
open System.IO
open System.Reflection
open Microsoft.FSharp.Reflection

module Css =
  module align =
    module content =
      let flexStart = Prim.style "align-content" "flex-start"
      let flexEnd = Prim.style "align-content" "flex-end"
      let center = Prim.style "align-content" "center"
      let spaceBetween = Prim.style "align-content" "spaceBetween"
      let spaceAround = Prim.style "align-content" "spaceAround"
      let stretch = Prim.style "align-content" "stretch"
      let inherit' = Prim.style "align-content" "inherit"
    module items =
      let flexStart = Prim.style "align-items" "flex-start"
      let flexEnd = Prim.style "align-items" "flex-end"
      let center = Prim.style "align-items" "center"
      let baseline = Prim.style "align-items" "baseline"
      let stretch = Prim.style "align-items" "stretch"
      let inherit' = Prim.style "align-items" "inherit"
    module self =
      let auto = Prim.style "align-self" "auto"
      let flexStart = Prim.style "align-self" "flex-start"
      let flexEnd = Prim.style "align-self" "flex-end"
      let center = Prim.style "align-self" "center"
      let baseline = Prim.style "align-self" "baseline"
      let stretch = Prim.style "align-self" "stretch"
      let inherit' = Prim.style "align-self" "inherit"
  module alignment =
    module adjust =
      let inline value v = Prim.style "alignment-adjust" v
      let auto = Prim.style "alignment-adjust" "auto"
      let baseline = Prim.style "alignment-adjust" "baseline"
      let beforeEdge = Prim.style "alignment-adjust" "before-edge"
      let textBeforeEdge = Prim.style "alignment-adjust" "text-before-edge"
      let central = Prim.style "alignment-adjust" "central"
      let middle = Prim.style "alignment-adjust" "middle"
      let afterEdge = Prim.style "alignment-adjust" "after-edge"
      let textAfterEdge = Prim.style "alignment-adjust" "text-after-edge"
      let ideographic = Prim.style "alignment-adjust" "ideographic"
      let alphabetic = Prim.style "alignment-adjust" "alphabetic"
      let hanging = Prim.style "alignment-adjust" "hanging"
      let mathematical = Prim.style "alignment-adjust" "mathematical"
    module baseline =
      let baseline = Prim.style "alignment-baseline" "baseline"
      let useScript = Prim.style "alignment-baseline" "use-script"
      let beforeEdge = Prim.style "alignment-baseline" "before-edge"
      let textBeforeEdge = Prim.style "alignment-baseline" "text-before-edge"
      let central = Prim.style "alignment-baseline" "central"
      let middle = Prim.style "alignment-baseline" "middle"
      let afterEdge = Prim.style "alignment-baseline" "after-edge"
      let textAfterEdge = Prim.style "alignment-baseline" "text-after-edge"
      let ideographic = Prim.style "alignment-baseline" "ideographic"
      let alphabetic = Prim.style "alignment-baseline" "alphabetic"
      let hanging = Prim.style "alignment-baseline" "hanging"
      let mathematical = Prim.style "alignment-baseline" "mathematical"
  let inline all v = Prim.style "all" v
  let inline anchorPoint v = Prim.style "anchor-point" v
  module animation =
    let inline value v = Prim.style "animation" v
    let inline delay v = Prim.style "animation-delay" v
    module direction =
      let normal = Prim.style "animation-direction" "normal"
      let alternate = Prim.style "animation-direction" "alternate"
      let inherit' = Prim.style "animation-direction" "inherit"
    module playState =
      let running = Prim.style "animation-play-state" "running"
      let paused = Prim.style "animation-play-state" "paused"
      let inherit' = Prim.style "animation-play-state" "inherit"
    let inline duration v = Prim.style "animation-duration" v
    let inline iterationCount v = Prim.style "animation-iteration-count" v
    let inline name v = Prim.style "animation-name" v
    module timingFunction =
      let inline value v = Prim.style "animation-timing-function" v
      let ease = Prim.style "animation-timing-function" "ease"
      let linear = Prim.style "animation-timing-function" "linear"
      let easeIn = Prim.style "animation-timing-function" "ease-in"
      let easeOut = Prim.style "animation-timing-function" "ease-out"
      let easeInOut = Prim.style "animation-timing-function" "ease-in-out"
      let inherit' = Prim.style "animation-timing-function" "inherit"
  module appearance =
    let normal = Prim.style "appearance" "normal"
    let button = Prim.style "appearance" "button"
    let pushButton = Prim.style "appearance" "push-button"
    let hyperlink = Prim.style "appearance" "hyperlink"
    let radioButton = Prim.style "appearance" "radio-button"
    let checkbox = Prim.style "appearance" "checkbox"
    let popUpMenu = Prim.style "appearance" "pop-up-menu"
    let listMenu = Prim.style "appearance" "list-menu"
    let radioGroup = Prim.style "appearance" "radio-group"
    let checkboxGroup = Prim.style "appearance" "checkbox-group"
    let field = Prim.style "appearance" "field"
    let password = Prim.style "appearance" "password"
    let inherit' = Prim.style "appearance" "inherit"
  module backfaceVisibility =
    let visible = Prim.style "backface-visibility" "visible"
    let hidden = Prim.style "backface-visibility" "hidden"
    let inherit' = Prim.style "backface-visibility" "inherit"
  let inline azimuth v = Prim.style "azimuth" v
  module background =
    let inline value v = Prim.style "background" v
    module attachment =
      let scroll = Prim.style "background-attachment" "scroll"
      let fixed' = Prim.style "background-attachment" "fixed"
      let inherit' = Prim.style "background-attachment" "inherit"
    let inline clip v = Prim.style "background-clip" v
    let inline color v = Prim.style "background-color" v
    let inline image v = Prim.style "background-image" v
    let inline origin v = Prim.style "background-origin" v
    let inline position v = Prim.style "background-position" v
    module repeat =
      let repeat = Prim.style "background-repeat" "repeat"
      let repeatX = Prim.style "background-repeat" "repeat-x"
      let repeatY = Prim.style "background-repeat" "repeat-y"
      let noRepeat = Prim.style "background-repeat" "no-repeat"
      let inherit' = Prim.style "background-repeat" "inherit"
    let inline size v = Prim.style "background-size" v
  module baselineShift =
    let baseline = Prim.style "baseline-shift" "baseline"
    let sub = Prim.style "baseline-shift" "sub"
    let super = Prim.style "baseline-shift" "super"
    let inline value v = Prim.style "baseline-shift" v
    let inherit' = Prim.style "baseline-shift" "inherit"
  let inline binding v = Prim.style "binding" v
  let inline bleed v = Prim.style "bleed" v
  module bookmark =
    let inline label v = Prim.style "bookmark-label" v
    let inline level v = Prim.style "bookmark-level" v
    module state =
      let open' = Prim.style "bookmark-state" "open"
      let closed = Prim.style "bookmark-state" "closed"
      let inherit' = Prim.style "bookmark-state" "inherit"
    let inline target v = Prim.style "bookmark-target" v
  module border =
    let inline value v = Prim.style "border" v
    module collapse =
      let collapse = Prim.style "border-collapse" "collapse"
      let separate = Prim.style "border-collapse" "separate"
      let inherit' = Prim.style "border-collapse" "inherit"
    let inline color v = Prim.style "border-color" v
    let inline spacing v = Prim.style "border-spacing" v
    let inline width v = Prim.style "border-width" v
    let inline radius v = Prim.style "border-radius" v
    module image =
      let inline value v = Prim.style "border-image" v
      let inherit' = Prim.style "border-image" "inherit"
      let inline outset v = Prim.style "border-image-outset" v
      module repeat =
        let stretch = Prim.style "border-image-repeat" "stretch"
        let repeat = Prim.style "border-image-repeat" "repeat"
        let round = Prim.style "border-image-repeat" "round"
        let space = Prim.style "border-image-repeat" "space"
        let inline value v = Prim.style "border-image-repeat" v
        let inherit' = Prim.style "border-image-repeat" "inherit"
      let inline slice v = Prim.style "border-image-slice" v
      let inline source v = Prim.style "border-image-source" v
      let inline width v = Prim.style "border-image-source" v
    module left =
      let inline value v = Prim.style "border-left" v
      let inline color v = Prim.style "border-left-color" v
      let inline style v = Prim.style "border-left-style" v
      let inline width v = Prim.style "border-left-width" v
    module right =
      let inline value v = Prim.style "border-right" v
      let inline color v = Prim.style "border-right-color" v
      let inline style v = Prim.style "border-right-style" v
      let inline width v = Prim.style "border-right-width" v
    module top =
      let inline value v = Prim.style "border-top" v
      let inline color v = Prim.style "border-top-color" v
      let inline style v = Prim.style "border-top-style" v
      let inline width v = Prim.style "border-top-width" v
      let inline leftRadius v = Prim.style "border-top-left-radius" v
      let inline rightRadius v = Prim.style "border-top-right-radius" v
    module bottom =
      let inline value v = Prim.style "border-bottom" v
      let inline color v = Prim.style "border-bottom-color" v
      let inline style v = Prim.style "border-bottom-style" v
      let inline width v = Prim.style "border-bottom-width" v
      let inline leftRadius v = Prim.style "border-bottom-left-radius" v
      let inline rightRadius v = Prim.style "border-bottom-right-radius" v
  let inline bottom v = Prim.style "bottom" v
  module box =
    module decorationBreak =
      let slice = Prim.style "box-decoration-break" "slice"
      let clone = Prim.style "box-decoration-break" "clone"
    let inline shadow v = Prim.style "box-shadow" v
    module sizing =
      let contentBox = Prim.style "box-sizing" "content-box"
      let paddingBox = Prim.style "box-sizing" "padding-box"
      let borderBox = Prim.style "box-sizing" "border-box"
      let inherit' = Prim.style "box-sizing" "inherit"
  module break' =
    module after =
      let auto = Prim.style "break-after" "auto"
      let always = Prim.style "break-after" "always"
      let avoid = Prim.style "break-after" "avoid"
      let left = Prim.style "break-after" "left"
      let right = Prim.style "break-after" "right"
      let page = Prim.style "break-after" "page"
      let column = Prim.style "break-after" "column"
      let avoidPage = Prim.style "break-after" "avoid-page"
      let avoidColumn = Prim.style "break-after" "avoid-column"
    module before =
      let auto = Prim.style "break-before" "auto"
      let always = Prim.style "break-before" "always"
      let avoid = Prim.style "break-before" "avoid"
      let left = Prim.style "break-before" "left"
      let right = Prim.style "break-before" "right"
      let page = Prim.style "break-before" "page"
      let column = Prim.style "break-before" "column"
      let avoidPage = Prim.style "break-before" "avoid-page"
      let avoidColumn = Prim.style "break-before" "avoid-column"
    module inside =
      let auto = Prim.style "break-inside" "auto"
      let avoid = Prim.style "break-inside" "avoid"
      let avoidPage = Prim.style "break-inside" "avoid-page"
      let avoidColumn = Prim.style "break-inside" "avoid-column"
  module captionSide =
    let top = Prim.style "caption-side" "top"
    let bottom = Prim.style "caption-side" "bottom"
    let inherit' = Prim.style "caption-side" "inherit"
  module clear =
    let none = Prim.style "clear" "none"
    let left = Prim.style "clear" "left"
    let right = Prim.style "clear" "right"
    let both = Prim.style "clear" "both"
    let inherit' = Prim.style "clear" "inherit"
  let inline clip v = Prim.style "clip" v
  let inline color v = Prim.style "color" v
  module colorProfile =
    let auto = Prim.style "color-profile" "auto"
    let sRGB = Prim.style "color-profile" "sRGB"
    let inline value v = Prim.style "color-profile" v
    let inherit' = Prim.style "color-profile" "inherit"
  module column =
    let inline count v = Prim.style "column-count" v
    module fill =
      let auto = Prim.style "column-fill" "auto"
      let balance = Prim.style "column-fill" "balance"
    let inline gap v = Prim.style "column-gap" v
    module rule =
      let inline value v = Prim.style "column-rule" v
      let inline color v = Prim.style "column-rule-color" v
      let inline width v = Prim.style "column-rule-width" v
      let inline style v = Prim.style "column-rule-style" v
    module span =
      let none = Prim.style "column-span" "none"
      let all = Prim.style "column-span" "all"
    let inline width v = Prim.style "column-width" v
  let inline columns v = Prim.style "columns" v
  let inline content v = Prim.style "content" v
  let inline counterIncrement v = Prim.style "counter-increment" v
  let inline counterReset v = Prim.style "counter-reset" v
  let inline crop v = Prim.style "crop" v
  let inline cueAfter v = Prim.style "cue-after" v
  let inline cueBefore v = Prim.style "cue-before" v
  let inline cue v = Prim.style "cue" v
  module cursor =
    let auto = Prim.style "cursor" "auto"
    let crosshair = Prim.style "cursor" "crosshair"
    let default' = Prim.style "cursor" "default"
    let pointer = Prim.style "cursor" "pointer"
    let move = Prim.style "cursor" "move"
    let eResize = Prim.style "cursor" "e-resize"
    let neResize = Prim.style "cursor" "ne-resize"
    let nwResize = Prim.style "cursor" "nw-resize"
    let nResize = Prim.style "cursor" "n-resize"
    let seResize = Prim.style "cursor" "se-resize"
    let swResize = Prim.style "cursor" "sw-resize"
    let sResize = Prim.style "cursor" "s-resize"
    let wResize = Prim.style "cursor" "w-resize"
    let text = Prim.style "cursor" "text"
    let wait = Prim.style "cursor" "wait"
    let help = Prim.style "cursor" "help"
    let progress = Prim.style "cursor" "progress"
    let inherit' = Prim.style "cursor" "inherit"
    let inline uri v = Prim.style "cursor" ("url(" + v + ")")
  module direction =
    let ltr = Prim.style "direction" "ltr"
    let rtl = Prim.style "direction" "rtl"
    let inherit' = Prim.style "direction" "inherit"
  module display =
    let inline' = Prim.style "display" "inline"
    let block = Prim.style "display" "block"
    let listItem = Prim.style "display" "list-item"
    let runIn = Prim.style "display" "run-in"
    let inlineBlock = Prim.style "display" "inline-block"
    let table = Prim.style "display" "table"
    let inlineTable = Prim.style "display" "inline-table"
    let tableRowGroup = Prim.style "display" "table-row-group"
    let tableHeaderGroup = Prim.style "display" "table-header-group"
    let tableFooterGroup = Prim.style "display" "table-footer-group"
    let tableRow = Prim.style "display" "table-row"
    let tableColumnGroup = Prim.style "display" "table-column-group"
    let tableColumn = Prim.style "display" "table-column"
    let tableCell = Prim.style "display" "table-cell"
    let tableCaption = Prim.style "display" "table-caption"
    let none = Prim.style "display" "none"
    let inherit' = Prim.style "display" "inherit"
  module dominantBaseline =
    let auto = Prim.style "dominant-baseline" "auto"
    let useScript = Prim.style "dominant-baseline" "use-script"
    let noChange = Prim.style "dominant-baseline" "no-change"
    let resetSize = Prim.style "dominant-baseline" "reset-size"
    let alphabetic = Prim.style "dominant-baseline" "alphabetic"
    let hanging = Prim.style "dominant-baseline" "hanging"
    let ideographic = Prim.style "dominant-baseline" "ideographic"
    let mathematical = Prim.style "dominant-baseline" "mathematical"
    let central = Prim.style "dominant-baseline" "central"
    let middle = Prim.style "dominant-baseline" "middle"
    let textAfterEdge = Prim.style "dominant-baseline" "text-after-edge"
    let textBeforeEdge = Prim.style "dominant-baseline" "text-before-edge"
  module dropInitial =
    module after =
      module adjust =
        let central = Prim.style "drop-initial-after-adjust" "central"
        let middle = Prim.style "drop-initial-after-adjust" "middle"
        let afterEdge = Prim.style "drop-initial-after-adjust" "after-edge"
        let textAfterEdge = Prim.style "drop-initial-after-adjust" "text-after-edge"
        let ideographic = Prim.style "drop-initial-after-adjust" "ideographic"
        let alphabetic = Prim.style "drop-initial-after-adjust" "alphabetic"
        let mathematical = Prim.style "drop-initial-after-adjust" "mathematical"
        let inline value v = Prim.style "drop-initial-after-adjust" v
      module align =
        let baseline = Prim.style "drop-initial-after-align" "baseline"
        let useScript = Prim.style "drop-initial-after-align" "use-script"
        let beforeEdge = Prim.style "drop-initial-after-align" "before-edge"
        let textBeforeEdge = Prim.style "drop-initial-after-align" "text-before-edge"
        let central = Prim.style "drop-initial-after-align" "central"
        let middle = Prim.style "drop-initial-after-align" "middle"
        let afterEdge = Prim.style "drop-initial-after-align" "after-edge"
        let textAfterEdge = Prim.style "drop-initial-after-align" "text-after-edge"
        let ideographic = Prim.style "drop-initial-after-align" "ideographic"
        let alphabetic = Prim.style "drop-initial-after-align" "alphabetic"
        let hanging = Prim.style "drop-initial-after-align" "hanging"
        let mathematical = Prim.style "drop-initial-after-align" "mathematical"
    module before =
      module adjust =
        let beforeEdge = Prim.style "drop-initial-before-adjust" "before-edge"
        let textBeforeEdge = Prim.style "drop-initial-before-adjust" "text-before-edge"
        let central = Prim.style "drop-initial-before-adjust" "central"
        let middle = Prim.style "drop-initial-before-adjust" "middle"
        let hanging = Prim.style "drop-initial-before-adjust" "hanging"
        let mathematical = Prim.style "drop-initial-before-adjust" "mathematical"
        let inline value v = Prim.style "drop-initial-before-adjust" v
      module align =
        let capsHeight = Prim.style "drop-initial-before-align" "caps-height"
        let baseline = Prim.style "drop-initial-before-align" "baseline"
        let useScript = Prim.style "drop-initial-before-align" "use-script"
        let beforeEdge = Prim.style "drop-initial-before-align" "before-edge"
        let textBeforeEdge = Prim.style "drop-initial-before-align" "text-before-edge"
        let central = Prim.style "drop-initial-before-align" "central"
        let middle = Prim.style "drop-initial-before-align" "middle"
        let afterEdge = Prim.style "drop-initial-before-align" "after-edge"
        let textAfterEdge = Prim.style "drop-initial-before-align" "text-after-edge"
        let ideographic = Prim.style "drop-initial-before-align" "ideographic"
        let alphabetic = Prim.style "drop-initial-before-align" "alphabetic"
        let hanging = Prim.style "drop-initial-before-align" "hanging"
        let mathematical = Prim.style "drop-initial-before-align" "mathematical"
    let inline size v = Prim.style "drop-initial-size" v
    let inline value v = Prim.style "drop-initial-value" v
  module elevation =
    let inline angle v = Prim.style "elevation" v
    let below = Prim.style "elevation" "below"
    let level = Prim.style "elevation" "level"
    let above = Prim.style "elevation" "above"
    let higher = Prim.style "elevation" "higher"
    let lower = Prim.style "elevation" "lower"
    let inherit' = Prim.style "elevation" "inherit"
  module emptyCells =
    let show = Prim.style "empty-cells" "show"
    let hide = Prim.style "empty-cells" "hide"
    let inherit' = Prim.style "empty-cells" "inherit"
  module fit =
    let fill = Prim.style "fit-position" "fill"
    let hidden = Prim.style "fit-position" "hidden"
    let meet = Prim.style "fit-position" "meet"
    let slice = Prim.style "fit-position" "slice"
    let position v = Prim.style "fit-position" v
  module flex =
    let inline value v = Prim.style "flex" v
    let inline basis v = Prim.style "flex-basis" v
    module direction =
      let row = Prim.style "flex-direction" "row"
      let rowReverse = Prim.style "flex-direction" "row-reverse"
      let column = Prim.style "flex-direction" "column"
      let columnReverse = Prim.style "flex-direction" "column-reverse"
    let inline flow v = Prim.style "flex-flow" v
    let inline grow v = Prim.style "flex-grow" v
    let inline shrink v = Prim.style "flex-shrink" v
    module wrap =
      let nowrap = Prim.style "flex-wrap" "nowrap"
      let wrap = Prim.style "flex-wrap" "wrap"
      let wrapReverse = Prim.style "flex-wrap" "wrap-reverse"
  module float =
    let left = Prim.style "float" "left"
    let right = Prim.style "float" "right"
    let none = Prim.style "float" "none"
    let inherit' = Prim.style "float" "inherit"
  let inline floatOffset v = Prim.style "float-offset" v
  module font =
    let inline value v = Prim.style "font" v
    let inline family v = Prim.style "font-family" v
    let inline size v = Prim.style "font-size" v
    let inline sizeAdjust v = Prim.style "font-size-adjust" v
    module stretch =
      let normal = Prim.style "font-stretch" "normal"
      let ultraCondensed = Prim.style "font-stretch" "ultra-condensed"
      let extraCondensed = Prim.style "font-stretch" "extra-condensed"
      let condensed = Prim.style "font-stretch" "condensed"
      let semiCondensed = Prim.style "font-stretch" "semi-condensed"
      let semiExpanded = Prim.style "font-stretch" "semi-expanded"
      let expanded = Prim.style "font-stretch" "expanded"
      let extraExpanded = Prim.style "font-stretch" "extra-expanded"
      let ultraExpanded = Prim.style "font-stretch" "ultra-expanded"
    module style =
      let normal = Prim.style "font-style" "normal"
      let italic = Prim.style "font-style" "italic"
      let oblique = Prim.style "font-style" "oblique"
      let inherit' = Prim.style "font-style" "inherit"
    let inline synthesis v = Prim.style "font-synthesis" v
    module variant =
      let normal = Prim.style "font-variant" "normal"
      let smallCaps = Prim.style "font-variant" "small-caps"
      let inherit' = Prim.style "font-variant" "inherit"
      module caps =
        let normal = Prim.style "font-variant-caps" "normal"
        let smallCaps = Prim.style "font-variant-caps" "small-caps"
        let allSmallCaps = Prim.style "font-variant-caps" "all-small-caps"
        let petiteCaps = Prim.style "font-variant-caps" "petite-caps"
        let allPetiteCaps = Prim.style "font-variant-caps" "all-petite-caps"
        let unicase = Prim.style "font-variant-caps" "unicase"
        let titlingCaps = Prim.style "font-variant-caps" "titling-caps"
      let inline alternates v = Prim.style "font-variant-alternates" v
      let inline eastAsian v = Prim.style "font-variant-east-asian" v
      let inline ligatures v = Prim.style "font-variant-ligatures" v
      let inline numeric v = Prim.style "font-variant-numeric" v
      module position =
        let normal = Prim.style "font-variant-position" "normal"
        let sub = Prim.style "font-variant-position" "sub"
        let super = Prim.style "font-variant-position" "super"
    module weight =
      let inline value v = Prim.style "font-weight" v
      let normal = Prim.style "font-weight" "normal"
      let bold = Prim.style "font-weight" "bold"
      let bolder = Prim.style "font-weight" "bolder"
      let lighter = Prim.style "font-weight" "lighter"
      let inherit' = Prim.style "font-weight" "inherit"
    let featureSettings v = Prim.style "font-feature-settings" v
    module kerning =
      let auto = Prim.style "font-kerning" "auto"
      let normal = Prim.style "font-kerning" "normal"
      let none = Prim.style "font-kerning" "none"
    let inline languageOverride v = Prim.style "font-language-override" v
  module grid =
    let PENDING_BETTER_SPEC = ()
  module hangingPunctuation =
    let none = Prim.style "hanging-punctuation" "none"
    let first = Prim.style "hanging-punctuation" "first"
    let forceEnd = Prim.style "hanging-punctuation" "force-end"
    let allowEnd = Prim.style "hanging-punctuation" "allow-end"
    let last = Prim.style "hanging-punctuation" "last"
  let inline height v = Prim.style "height" v
  module hyphens =
    let none = Prim.style "hyphens" "none"
    let manual = Prim.style "hyphens" "manual"
    let auto = Prim.style "hyphens" "auto"
  let inline icon v = Prim.style "icon" v
  module image =
    let inline orientation v = Prim.style "image-orientation" v
    let inline resolution v = Prim.style "image-resolution" v
  module imeMode =
    let auto = Prim.style "ime-mode" "auto"
    let normal = Prim.style "ime-mode" "normal"
    let active = Prim.style "ime-mode" "active"
    let inactive = Prim.style "ime-mode" "inactive"
    let disabled = Prim.style "ime-mode" "disabled"
    let inherit' = Prim.style "ime-mode" "inherit"
  let inline inlineBoxAlign v = Prim.style "inline-box-align" v
  let inline left v = Prim.style "left" v
  let inline letterSpacing v = Prim.style "letter-spacing" v
  module line =
    module break' =
      let auto = Prim.style "line-break" "auto"
      let loose = Prim.style "line-break" "loose"
      let normal = Prim.style "line-break" "normal"
      let strict = Prim.style "line-break" "strict"
    let inline height v = Prim.style "line-height" v
    module stacking =
      module ruby =
        let excludeRuby = Prim.style "line-stacking-ruby" "exclude-ruby"
        let includeRuby = Prim.style "line-stacking-ruby" "include-ruby"
      module shift =
        let considerShifts = Prim.style "line-stacking-shift" "consider-shifts"
        let disregardShifts = Prim.style "line-stacking-shift" "disregard-shifts"
      module strategy =
        let inlineLineHeight = Prim.style "line-stacking-strategy" "inline-line-height"
        let blockLineHeight = Prim.style "line-stacking-strategy" "block-line-height"
        let maxHeight = Prim.style "line-stacking-strategy" "max-height"
        let gridHeight = Prim.style "line-stacking-strategy" "grid-height"
  module justifyContent =
    let flexStart = Prim.style "justify-content" "flex-start"
    let flexEnd = Prim.style "justify-content" "flex-end"
    let center = Prim.style "justify-content" "center"
    let spaceBetween = Prim.style "justify-content" "space-between"
    let spaceAround = Prim.style "justify-content" "space-around"
  module listStyle =
    let inline value v = Prim.style "list-style" v
    let inline image v = Prim.style "list-style-image" v
    module position =
      let inside = Prim.style "list-style-position" "inside"
      let outside = Prim.style "list-style-position" "outside"
      let inherit' = Prim.style "list-style-position" "inherit"
    module type' =
      let disc = Prim.style "list-style-type" "disc"
      let circle = Prim.style "list-style-type" "circle"
      let square = Prim.style "list-style-type" "square"
      let decimal = Prim.style "list-style-type" "decimal"
      let decimalLeadingZero = Prim.style "list-style-type" "decimal-leading-zero"
      let lowerRoman = Prim.style "list-style-type" "lower-roman"
      let upperRoman = Prim.style "list-style-type" "upper-roman"
      let lowerGreek = Prim.style "list-style-type" "lower-greek"
      let lowerLatin = Prim.style "list-style-type" "lower-latin"
      let upperLatin = Prim.style "list-style-type" "upper-latin"
      let armenian = Prim.style "list-style-type" "armenian"
      let georgian = Prim.style "list-style-type" "georgian"
      let lowerAlpha = Prim.style "list-style-type" "lower-alpha"
      let upperAlpha = Prim.style "list-style-type" "upper-alpha"
      let none = Prim.style "list-style-type" "none"
      let inherit' = Prim.style "list-style-type" "inherit"
  module marks =
    let crop = Prim.style "marks" "crop"
    let cross = Prim.style "marks" "cross"
    let none = Prim.style "marks" "none"
  module margin =
    let inline value v = Prim.style "margin" v
    let inline left v = Prim.style "margin-left" v
    let inline right v = Prim.style "margin-right" v
    let inline top v = Prim.style "margin-top" v
    let inline bottom v = Prim.style "margin-bottom" v
  module marquee =
    module direction =
      let forward = Prim.style "marquee-direction" "forward"
      let reverse = Prim.style "marquee-direction" "reverse"
    let inline loop v = Prim.style "marquee-loop" v
    let inline playCount v = Prim.style "marquee-play-count" v
    module speed =
      let slow = Prim.style "marquee-speed" "slow"
      let normal = Prim.style "marquee-speed" "normal"
      let fast = Prim.style "marquee-speed" "fast"
    module style =
      let scroll = Prim.style "marquee-style" "scroll"
      let slide = Prim.style "marquee-style" "slide"
      let alternate = Prim.style "marquee-style" "alternate"
  let inline maxHeight v = Prim.style "max-height" v
  let inline maxWidth v = Prim.style "max-width" v
  let inline minHeight v = Prim.style "min-height" v
  let inline minWidth v = Prim.style "min-width" v
  let inline moveTo v = Prim.style "move-to" v
  module nav =
    let inline down v = Prim.style "nav-down" v
    let inline index v = Prim.style "nav-index" v
    let inline left v = Prim.style "nav-left" v
    let inline right v = Prim.style "nav-right" v
    let inline up v = Prim.style "nav-up" v
  let inline opacity v = Prim.style "opacity" v
  let inline order v = Prim.style "order" v
  let inline orphans v = Prim.style "orphans" v
  module outline =
    let inline value v = Prim.style "outline" v
    let inline color v = Prim.style "outline-color" v
    let inline style v = Prim.style "outline-style" v
    let inline width v = Prim.style "outline-width" v
    let inline offset v = Prim.style "outline-offset" v
  module overflow =
    let visible = Prim.style "overflow" "visible"
    let hidden = Prim.style "overflow" "hidden"
    let scroll = Prim.style "overflow" "scroll"
    let auto = Prim.style "overflow" "auto"
    let inherit' = Prim.style "overflow" "inherit"
    module x =
      let visible = Prim.style "overflow-x" "visible"
      let hidden = Prim.style "overflow-x" "hidden"
      let scroll = Prim.style "overflow-x" "scroll"
      let auto = Prim.style "overflow-x" "auto"
      let inherit' = Prim.style "overflow-x" "inherit"
    module y =
      let visible = Prim.style "overflow-y" "visible"
      let hidden = Prim.style "overflow-y" "hidden"
      let scroll = Prim.style "overflow-y" "scroll"
      let auto = Prim.style "overflow-y" "auto"
      let inherit' = Prim.style "overflow-y" "inherit"
    module style =
      let auto = Prim.style "overflow-style" "auto"
      let marqueeLine = Prim.style "overflow-style" "marquee-line"
      let marqueeBlock = Prim.style "overflow-style" "marquee-block"
    module wrap =
      let normal = Prim.style "overflow-wrap" "normal"
      let breakWord = Prim.style "overflow-wrap" "break-word"
  module padding =
    let inline value v = Prim.style "padding" v
    let inline left v = Prim.style "padding-left" v
    let inline right v = Prim.style "padding-right" v
    let inline top v = Prim.style "padding-top" v
    let inline bottom v = Prim.style "padding-bottom" v
  module page =
    let inline value v = Prim.style "page" v
    module policy =
      let start = Prim.style "page-policy" "start"
      let first = Prim.style "page-policy" "first"
      let last = Prim.style "page-policy" "last"
    module break' =
      module after =
        let auto = Prim.style "page-break-after" "auto"
        let always = Prim.style "page-break-after" "always"
        let avoid = Prim.style "page-break-after" "avoid"
        let left = Prim.style "page-break-after" "left"
        let right = Prim.style "page-break-after" "right"
        let inherit' = Prim.style "page-break-after" "inherit"
      module before =
        let auto = Prim.style "page-break-before" "auto"
        let always = Prim.style "page-break-before" "always"
        let avoid = Prim.style "page-break-before" "avoid"
        let left = Prim.style "page-break-before" "left"
        let right = Prim.style "page-break-before" "right"
        let inherit' = Prim.style "page-break-before" "inherit"
      module inside =
        let auto = Prim.style "page-break-inside" "auto"
        let always = Prim.style "page-break-inside" "always"
        let avoid = Prim.style "page-break-inside" "avoid"
        let left = Prim.style "page-break-inside" "left"
        let right = Prim.style "page-break-inside" "right"
        let inherit' = Prim.style "page-break-inside" "inherit"
  module pause =
    let inline value v = Prim.style "pause" v
    let inline after v = Prim.style "pause-after" v
    let inline before v = Prim.style "pause-before" v
  let inline perspective v = Prim.style "perspective" v
  let inline perspectiveOrigin v = Prim.style "perspective-origin" v
  let inline pitch v = Prim.style "pitch" v
  let inline pitchRange v = Prim.style "pitch-range" v
  let inline playDuring v = Prim.style "play-during" v
  module position =
    let static' = Prim.style "position" "static"
    let relative = Prim.style "position" "relative"
    let absolute = Prim.style "position" "absolute"
    let fixed' = Prim.style "position" "fixed"
    let inherit' = Prim.style "position" "inherit"
  let inline presentationLevel v = Prim.style "presentation-level" v
  let inline quotes v = Prim.style "quotes" v
  module renderingIntent =
    let auto = Prim.style "rendering-intent" "auto"
    let perceptual = Prim.style "rendering-intent" "perceptual"
    let relativeColorimetric = Prim.style "rendering-intent" "relative-colorimetric"
    let saturation = Prim.style "rendering-intent" "saturation"
    let absoluteColorimetric = Prim.style "rendering-intent" "absolute-colorimetric"
    let inherit' = Prim.style "rendering-intent" "inherit"
  module resize =
    let none = Prim.style "resize" "none"
    let both = Prim.style "resize" "both"
    let horizontal = Prim.style "resize" "horizontal"
    let vertical = Prim.style "resize" "vertical"
    let inherit' = Prim.style "resize" "inherit"
  module rest =
    let inline value v = Prim.style "rest" v
    module before =
      let inline value v = Prim.style "rest-before" v
      let none = Prim.style "rest-before" "none"
      let xWeak = Prim.style "rest-before" "x-weak"
      let weak = Prim.style "rest-before" "weak"
      let medium = Prim.style "rest-before" "medium"
      let strong = Prim.style "rest-before" "strong"
      let xStrong = Prim.style "rest-before" "x-strong"
    module after =
      let inline value v = Prim.style "rest-after" v
      let none = Prim.style "rest-after" "none"
      let xWeak = Prim.style "rest-after" "x-weak"
      let weak = Prim.style "rest-after" "weak"
      let medium = Prim.style "rest-after" "medium"
      let strong = Prim.style "rest-after" "strong"
      let xStrong = Prim.style "rest-after" "x-strong"      
  let inline richness v = Prim.style "richness" v
  let inline right v = Prim.style "right" v
  let inline rotation v = Prim.style "rotation" v
  let inline rotationPoint v = Prim.style "rotationPoint" v
  module ruby =
    module align =
      let auto = Prim.style "ruby-align" "auto"
      let start = Prim.style "ruby-align" "start"
      let left = Prim.style "ruby-align" "left"
      let center = Prim.style "ruby-align" "center"
      let end' = Prim.style "ruby-align" "end"
      let right = Prim.style "ruby-align" "right"
      let distributeLetter = Prim.style "ruby-align" "distribute-letter"
      let distributeSpace = Prim.style "ruby-align" "distribute-space"
      let lineEdge = Prim.style "ruby-align" "line-edge"
    module overhang =
      let auto = Prim.style "ruby-overhang" "auto"
      let start = Prim.style "ruby-overhang" "start"
      let end' = Prim.style "ruby-overhang" "end"
      let none = Prim.style "ruby-overhang" "none"
    module position =
      let before = Prim.style "ruby-position" "before"
      let after = Prim.style "ruby-position" "after"
      let interCharacter = Prim.style "ruby-position" "inter-character"
      let inline' = Prim.style "ruby-position" "inline"
    let inline span v = Prim.style "ruby-span" v
  let inline size v = Prim.style "size" v
  module speak =
    let normal = Prim.style "speak" "normal"
    let none = Prim.style "speak" "none"
    let spellOut = Prim.style "speak" "spell-out"
    let inherit' = Prim.style "speak" "inherit"
    module header =
      let once = Prim.style "speak-header" "once"
      let always = Prim.style "speak-header" "always"
      let inherit' = Prim.style "speak-header" "inherit"
    module numeral =
      let digits = Prim.style "speak-numeral" "digits"
      let continuous = Prim.style "speak-header" "continuous"
      let inherit' = Prim.style "speak-header" "inherit"
    module punctuation =
      let code = Prim.style "speak-punctuation" "code"
      let none = Prim.style "speak-punctuation" "none"
      let inherit' = Prim.style "speak-punctuation" "inherit"
    module as' =
      let normal = Prim.style "speak-as" "normal"
      let spellOut = Prim.style "speak-as" "spell-out"
      let digits = Prim.style "speak-as" "digits"
      let literalPunctuation = Prim.style "speak-as" "literal-punctuation"
      let noPunctuation = Prim.style "speak-as" "no-punctuation"
  module speechRate =
    let inline value v = Prim.style "speech-rate" v
    let xSlow = Prim.style "speech-rate" "x-slow"
    let slow = Prim.style "speech-rate" "slow"
    let medium = Prim.style "speech-rate" "medium"
    let fast = Prim.style "speech-rate" "fast"
    let xFast = Prim.style "speech-rate" "x-fast"
    let faster = Prim.style "speech-rate" "faster"
    let slower = Prim.style "speech-rate" "slower"
    let inherit' = Prim.style "speech-rate" "inherit"
  let inline stress v = Prim.style "stress" v
  let inline stringSet v = Prim.style "string-set" v
  let inline tabSize v = Prim.style "tab-size" v
  module tableLayout =
    let auto = Prim.style "table-layout" "auto"
    let fixed' = Prim.style "table-layout" "fixed"
    let inherit' = Prim.style "table-layout" "inherit"
  module target =
    let inline value v = Prim.style "target" v
    module name =
      let current = Prim.style "target-name" "current"
      let root = Prim.style "target-name" "root"
      let parent = Prim.style "target-name" "parent"
      let new' = Prim.style "target-name" "new"
      let modal = Prim.style "target-name" "modal"
      let inline value v = Prim.style "target-name" v
    module new' =
      let window = Prim.style "target-new" "window"
      let tab = Prim.style "target-new" "tab"
      let none = Prim.style "target-new" "none"
    module position =
      let above = Prim.style "target-position" "above"
      let behind = Prim.style "target-position" "behind"
      let front = Prim.style "target-position" "front"
      let back = Prim.style "target-position" "back"
  module text =
    module align =
      let left = Prim.style "text-align" "left"
      let right = Prim.style "text-align" "right"
      let center = Prim.style "text-align" "center"
      let justify = Prim.style "text-align" "justify"
      let inherit' = Prim.style "text-align" "inherit"
    module decoration =
      let none = Prim.style "text-decoration" "none"
      let underline = Prim.style "text-decoration" "underline"
      let overline = Prim.style "text-decoration" "overline"
      let lineThrough = Prim.style "text-decoration" "line-through"
      let blink = Prim.style "text-decoration" "blink"
      let inherit' = Prim.style "text-decoration" "inherit"
      module line =
        let none = Prim.style "text-decoration-line" "none"
        let underline = Prim.style "text-decoration-line" "underline"
        let overline = Prim.style "text-decoration-line" "overline"
        let lineThrough = Prim.style "text-decoration-line" "line-through"
        let blink = Prim.style "text-decoration-line" "blink"
        let inline value v = Prim.style "text-decoration-line" v
        let inherit' = Prim.style "text-decoration-line" "inherit"
      let inline color v = Prim.style "text-decoration-color" v
      module style =
        let solid = Prim.style "text-decoration-style" "solid"
        let double = Prim.style "text-decoration-style" "double"
        let dotted = Prim.style "text-decoration-style" "dotted"
        let dashed = Prim.style "text-decoration-style" "dashed"
        let wavy = Prim.style "text-decoration-style" "wavy"
        let inline value v = Prim.style "text-decoration-style" v
        let inherit' = Prim.style "text-decoration-style" "inherit"
      module skip =
        let none = Prim.style "text-decoration-skip" "none"
        let objects = Prim.style "text-decoration-skip" "objects"
        let spaces = Prim.style "text-decoration-skip" "spaces"
        let ink = Prim.style "text-decoration-skip" "ink"
        let edges = Prim.style "text-decoration-skip" "edges"
        let boxDecoration = Prim.style "text-decoration-skip" "box-decoration"
        let inline value v = Prim.style "text-decoration-skip" v
        let inherit' = Prim.style "text-decoration-skip" "inherit"
    module emphasis =
      let inline value v = Prim.style "text-emphasis" v
      module style =
        let none = Prim.style "text-emphasis-style" "none"
        let filled = Prim.style "text-emphasis-style" "filled"
        let open' = Prim.style "text-emphasis-style" "open"
        let dot = Prim.style "text-emphasis-style" "dot"
        let circle = Prim.style "text-emphasis-style" "circle"
        let doubleCircle = Prim.style "text-emphasis-style" "double-circle"
        let triangle = Prim.style "text-emphasis-style" "triangle"
        let sesame = Prim.style "text-emphasis-style" "sesame"
        let inline value v = Prim.style "text-emphasis-style" v
        let inherit' v = Prim.style "text-emphasis-style" "inherit"
      let inline color v = Prim.style "text-emphasis-color" v
      let inline position v = Prim.style "text-emphasis-position" v
    module height =
      let auto = Prim.style "text-height" "auto"
      let fontSize = Prim.style "text-height" "font-size"
      let textSize = Prim.style "text-height" "text-size"
      let maxSize = Prim.style "text-height" "max-size"
      let inherit' = Prim.style "text-height" "inherit"
    let inline indent v = Prim.style "text-indent" v
    module justify =
      let auto = Prim.style "text-justify" "auto"
      let none = Prim.style "text-justify" "none"
      let interWord = Prim.style "text-justify" "inter-word"
      let interIdeograph = Prim.style "text-justify" "inter-ideograph"
      let interCluster = Prim.style "text-justify" "inter-cluster"
      let distribute = Prim.style "text-justify" "distribute"
      let kashida = Prim.style "text-justify" "kashida"
      let inherit' = Prim.style "text-justify" "inherit"
    module overflow =
      let clip = Prim.style "text-overflow" "clip"
      let ellipses = Prim.style "text-overflow" "ellipses"
      let inline value v = Prim.style "text-overflow" v
      let inherit' = Prim.style "text-overflow" "inherit"
    let inline shadow v = Prim.style "text-shadow" v
    module transform =
      let capitalize = Prim.style "text-transform" "capitalize"
      let uppercase = Prim.style "text-transform" "uppercase"
      let lowercase = Prim.style "text-transform" "lowercase"
      let none = Prim.style "text-transform" "none"
      let inherit' = Prim.style "text-transform" "inherit"
    module underlinePosition =
      let auto = Prim.style "text-underline-position" "auto"
      let alphabetic = Prim.style "text-underline-position" "alphabetic"
      let under = Prim.style "text-underline-position" "under"
      let underLeft = Prim.style "text-underline-position" "under left"
      let underRight = Prim.style "text-underline-position" "under right"
    module wrap =
      let normal = Prim.style "text-wrap" "normal"
      let pre = Prim.style "text-wrap" "pre"
      let nowrap = Prim.style "text-wrap" "nowrap"
      let preWrap = Prim.style "text-wrap" "pre-wrap"
      let preLine = Prim.style "text-wrap" "pre-line"
  let inline top v = Prim.style "top" v
  module transform =
    let inline value v = Prim.style "transform" v
    let inline origin v = Prim.style "transform-origin" v
    module style =
      let flat = Prim.style "transform-style" "flat"
      let preserve3d = Prim.style "transform-style" "preserve-3d"
  module transition =
    let inline value v = Prim.style "transition" v
    let inline delay v = Prim.style "transition-delay" v
    let inline duration v = Prim.style "transition-duration" v
    let inline property v = Prim.style "transition-property" v
    let inline timingFunction v = Prim.style "transition-timing-function" v
  module unicodeBidi =
    let normal = Prim.style "unicode-bidi" "normal"
    let embed = Prim.style "unicode-bidi" "embed"
    let bidiOverride = Prim.style "unicode-bidi" "bidi-override"
    let inherit' = Prim.style "unicode-bidi" "inherit"
  module verticalAlign =
    let inline value v = Prim.style "vertical-align" v
    let baseline = Prim.style "vertical-align" "baseline"
    let sub = Prim.style "vertical-align" "sub"
    let super = Prim.style "vertical-align" "super"
    let top = Prim.style "vertical-align" "top"
    let textTop = Prim.style "vertical-align" "text-top"
    let middle = Prim.style "vertical-align" "middle"
    let bottom = Prim.style "vertical-align" "bottom"
    let textBottom = Prim.style "vertical-align" "text-bottom"
    let inherit' = Prim.style "vertical-align" "inherit"
  module visibility =
    let visible = Prim.style "visibility" "visible"
    let hidden = Prim.style "visibility" "hidden"
    let collapse = Prim.style "visibility" "collapse"
    let inherit' = Prim.style "visibility" "inherit"
  module voice =
    module balance =
      let inline value v = Prim.style "voice-balance" v
      let left = Prim.style "voice-balance" "left"
      let center = Prim.style "voice-balance" "center"
      let right = Prim.style "voice-balance" "right"
      let leftwards = Prim.style "voice-balance" "leftwards"
      let rightwards = Prim.style "voice-balance" "rightwards"
    let inline duration v = Prim.style "voice-duration" v
    let inline family v = Prim.style "voice-family" v
    module pitch =
      let inline value v = Prim.style "voice-pitch" v
      let xLow = Prim.style "voice-pitch" "x-low"
      let low = Prim.style "voice-pitch" "low"
      let medium = Prim.style "voice-pitch" "medium"
      let high = Prim.style "voice-pitch" "high"
      let xHigh = Prim.style "voice-pitch" "x-high"
    module range =
      let inline value v = Prim.style "voice-range" v
      let xLow = Prim.style "voice-range" "x-low"
      let low = Prim.style "voice-range" "low"
      let medium = Prim.style "voice-range" "medium"
      let high = Prim.style "voice-range" "high"
      let xHigh = Prim.style "voice-range" "x-high"
    module rate =
      let inline value v = Prim.style "voice-rate" v
      let xSlow = Prim.style "voice-rate" "x-slow"
      let slow = Prim.style "voice-rate" "slow"
      let medium = Prim.style "voice-rate" "medium"
      let fast = Prim.style "voice-rate" "fast"
      let xFast  = Prim.style "voice-rate" "x-fast"
    module stress =
      let normal = Prim.style "voice-stress" "normal"
      let strong = Prim.style "voice-stress" "strong"
      let moderate = Prim.style "voice-stress" "moderate"
      let none = Prim.style "voice-stress" "none"
      let reduced = Prim.style "voice-stress" "reduced"
    module volume =
      let silent = Prim.style "voice-volume" "silent"
      let xSoft = Prim.style "voice-volume" "x-soft"
      let soft = Prim.style "voice-volume" "soft"
      let medium = Prim.style "voice-volume" "medium"
      let loud = Prim.style "voice-volume" "loud"
      let xLoud = Prim.style "voice-volume" "x-loud"
      let inline value v = Prim.style "voice-volume" v
  let inline voiceFamily v = Prim.style "voice-family" v
  module volume =
    let inline value v = Prim.style "volume" v
    let silent = Prim.style "volume" "silent"
    let xSoft = Prim.style "volume" "x-soft"
    let soft = Prim.style "volume" "soft"
    let medium = Prim.style "volume" "medium"
    let loud = Prim.style "volume" "loud"
    let xLoud = Prim.style "volume" "x-loud"
    let inherit' = Prim.style "volume" "inherit"
  module whiteSpace =
    let normal = Prim.style "white-space" "normal"
    let pre = Prim.style "white-space" "pre"
    let nowrap = Prim.style "white-space" "nowrap"
    let preWrap = Prim.style "white-space" "pre-wrap"
    let preLine = Prim.style "white-space" "pre-line"
    let inherit' = Prim.style "white-space" "inherit"
  let inline widows v = Prim.style "widows" v
  let inline width v = Prim.style "width" v
  module word =
    module break' =
      let normal = Prim.style "word-break" "normal"
      let keepAll = Prim.style "word-break" "keep-all"
      let breakAll = Prim.style "word-break" "break-all"
    let inline spacing v = Prim.style "word-spacing" v
    module wrap =
      let normal = Prim.style "word-wrap" "normal"
      let breakWord = Prim.style "word-wrap" "break-word"
  let inline zIndex v = Prim.style "z-index" v
